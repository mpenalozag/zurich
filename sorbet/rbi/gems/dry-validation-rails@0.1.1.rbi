# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-validation-rails` gem.
# Please instead update this file by running `bin/tapioca gem dry-validation-rails`.


# source://dry-validation-rails//lib/dry/validation/rails/version.rb#3
module Dry; end

# source://dry-validation-rails//lib/dry/validation/rails/version.rb#4
module Dry::Validation; end

# source://dry-validation-rails//lib/dry/validation/rails/version.rb#5
module Dry::Validation::Rails
  extend ::ActiveSupport::Autoload

  class << self
    # source://dry-validation-rails//lib/dry/validation/rails.rb#21
    def configuration; end

    # @yield [configuration]
    #
    # source://dry-validation-rails//lib/dry/validation/rails.rb#25
    def configure; end
  end
end

# source://dry-validation-rails//lib/dry/validation/rails.rb#30
class Dry::Validation::Rails::BaseError < ::StandardError; end

# source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#6
class Dry::Validation::Rails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#12
  def initialize(default_schema_prefix: T.unsafe(nil), default_schema_suffix: T.unsafe(nil)); end

  # Returns the value of attribute default_schema_prefix.
  #
  # source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#10
  def default_schema_prefix; end

  # Sets the attribute default_schema_prefix
  #
  # @param value the value to set the attribute default_schema_prefix to.
  #
  # source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#10
  def default_schema_prefix=(_arg0); end

  # Returns the value of attribute default_schema_suffix.
  #
  # source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#10
  def default_schema_suffix; end

  # Sets the attribute default_schema_suffix
  #
  # @param value the value to set the attribute default_schema_suffix to.
  #
  # source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#10
  def default_schema_suffix=(_arg0); end
end

# source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#7
Dry::Validation::Rails::Configuration::DEFAULT_SCHEMA_PREFIX = T.let(T.unsafe(nil), String)

# source://dry-validation-rails//lib/dry/validation/rails/configuration.rb#8
Dry::Validation::Rails::Configuration::DEFAULT_SCHEMA_SUFFIX = T.let(T.unsafe(nil), String)

# source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#6
module Dry::Validation::Rails::Helpers
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#13
  def default_schema_for(record, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#47
  def is_dry_schema?(schema); end

  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#51
  def is_dry_validation_contract?(schema); end

  # @raise [ArgumentError]
  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#36
  def need_to_validate?(record, options); end

  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#56
  def pass_record_to_contract?(options); end

  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#64
  def record_key_for_passing_to_contract(options); end

  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#71
  def skip_validation?(options, record); end

  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#25
  def valid_schema?(schema); end

  private

  # @return [Boolean]
  #
  # source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#93
  def boolean?(value); end
end

# source://dry-validation-rails//lib/dry/validation/rails/helpers.rb#7
Dry::Validation::Rails::Helpers::SUPPORTED_VALIDATORS = T.let(T.unsafe(nil), Array)

# source://dry-validation-rails//lib/dry/validation/rails.rb#31
class Dry::Validation::Rails::SchemaNotFound < ::Dry::Validation::Rails::BaseError; end

# source://dry-validation-rails//lib/dry/validation/rails/version.rb#6
Dry::Validation::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://dry-validation-rails//lib/dry/validation/rails/validatable.rb#6
module Dry::Validation::Rails::Validatable
  # source://dry-validation-rails//lib/dry/validation/rails/validatable.rb#7
  def validates_with_dry(**options); end
end

# source://dry-validation-rails//lib/dry/validation/rails/validator.rb#8
class Dry::Validation::Rails::Validator < ::ActiveModel::Validator
  include ::Dry::Validation::Rails::Helpers

  # source://dry-validation-rails//lib/dry/validation/rails/validator.rb#11
  def validate(record); end

  # source://dry-validation-rails//lib/dry/validation/rails/validator.rb#24
  def validate_schema(record, schema, options); end

  private

  # source://dry-validation-rails//lib/dry/validation/rails/validator.rb#52
  def validate_dry_schema(record, schema, _options); end

  # source://dry-validation-rails//lib/dry/validation/rails/validator.rb#37
  def validate_dry_validation_contract(record, schema, options); end

  # source://dry-validation-rails//lib/dry/validation/rails/validator.rb#60
  def validate_each(record, errors); end
end
